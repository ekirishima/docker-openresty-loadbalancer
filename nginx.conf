user root;
worker_processes auto; # Определяет количество рабочих процессов. Его лучше устанавливать в auto в новых версиях.

events {
	use epoll;
	worker_connections 1024; # Устанавливает максимальное количество соединений одного рабочего процесса. Следует выбирать значения от 1024 до 4096.
	multi_accept on; # Будет принимать максимально возможное количество соединений
}

http {

    include /usr/local/openresty/nginx/conf/workers.conf;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

	include /usr/local/openresty/nginx/conf/mime.types;
	default_type application/octet-stream;
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	types_hash_max_size 2048;
	open_file_cache max=200000 inactive=20s; # Определяет максимальное количество файлов, информация о которых будет содержаться в кеше
	open_file_cache_valid 30s; # Определяет через какое время информация будет удалена из кеша
	open_file_cache_min_uses 2; # Будет кешировать информацию о тех файлах, которые были использованы хотя бы 2 раза
	open_file_cache_errors on; # Будет кешировать информацию об отсутствующих файлах
	gzip on;
	gzip_comp_level 5;
	gzip_disable "msie6";
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;
	keepalive_timeout 30; # Будет ждать 30 секунд перед закрытием keepalive соединения
	keepalive_requests 100; # Максимальное количество keepalive запросов от одного клиента
	reset_timedout_connection on; # Если клиент перестал читать отвечать, Nginx будет сбрасывать соединение с ним
	client_body_timeout 10; # Будет ждать 10 секунд тело запроса от клиента, после чего сбросит соединение
	client_header_timeout 10; # xz
	send_timeout 2; # Если клиент прекратит чтение ответа, Nginx подождет 2 секунды и сбросит соединение
	client_max_body_size  32m; # В этом случае сервер не будет принимать запросы размером более 1Мб
  
    lua_shared_dict auto_ssl 1m;
    lua_shared_dict auto_ssl_settings 64k;
    resolver 8.8.8.8 ipv6=off;
  
    init_by_lua_block {
        auto_ssl = (require "resty.auto-ssl").new()
        auto_ssl:set("allow_domain", function(domain)
        return true
        end)
        auto_ssl:init()
    }

    init_worker_by_lua_block {
        auto_ssl:init_worker()
    }

    server {
        listen 443 ssl;
        # SSL GET certificate
        ssl_certificate_by_lua_block {
            auto_ssl:ssl_certificate()
        }
        ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
        ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;
        location / {
            proxy_pass http://app;
            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header Host $http_host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }

    server {
        listen 80;
        # SSL Verify Domain
        location /.well-known/acme-challenge/ {
            content_by_lua_block {
                auto_ssl:challenge_server()
            }
        }
        location / {
            proxy_pass http://app;
            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header Host $http_host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }

    # SSL Hook Server
    server {
        listen 127.0.0.1:8999;
        client_body_buffer_size 128k;
        client_max_body_size 128k;
        location / {
            content_by_lua_block {
                auto_ssl:hook_server()
            }
        }
    }

}
